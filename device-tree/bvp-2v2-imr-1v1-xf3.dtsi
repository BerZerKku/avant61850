/ {
	aliases {
		mdio-gpio3 = &mdio3;
	};
};

&i2c0 {
    // Access to XRS via I2C
    flx_bus_i2c_3: flx_bus@64 {
        #address-cells = <1>;
        #size-cells = <1>;
        compatible = "flx,bus-i2c";
        reg = <0x64>;

        xrs_3@0 {
            compatible = "flx,xrs";
            reg = <0x0 0xa>;

            // The following could be used instead of flx_xrs_guard. 
            // GPIO signal for power OK, optional
            // power-ok = <&gpio 42 0>;
            // GPIO signal for reset, optional 
            reset = <&gpio 45 0>;
            // Interrupt to enable via sysfs, optional           
            interrupt-parent = <&gpio>;
            interrupts = <6 8>;            
        };

        flx_gpio_behind_i2c_3: gpio_3@10000 {
            compatible = "flx,gpio";
            reg = <0x10000 0x1100>;

            gpio-controller;
            #gpio-cells = <2>;
            width = <0x14>;
        };

        // rtc_3@280000 {
        //     compatible = "flx,rtc";
        //     reg = <0x280000 0x10000>;
        //     /* Step size in nanoseconds and subnanoseconds */
        //     step-size = <8 0>;
        // };

        rs_behind_i2c_3: rs_3@300000 {
            #address-cells = <1>;
            #size-cells = <1>;
            compatible = "flx,rs";
            // Switch registers
            reg = <0x300000 0x8000>;
            interrupt-parent = <&gpio>;
            interrupts = <6 8>;
            mac_name = "xf3";
            port0@200000 {
                if_name = "SE21";
                // 0=none 1=SFP 2=PHY 5=NOPHY
                medium_type = <2>;
                cpu-port;
                // port and port adapter registers
                reg = <0x200000 0x10000>;
                phy-handle = <&phy0_3>;
                phy-mode = "rmii";
                //auto-speed-select;
            };
            port1@210000 {
                if_name = "CE22";
                medium_type = <1>;
                reg = <0x210000 0x10000>;
                phy-handle = <&phy1_3>;
                phy-mode = "rgmii-id";
                //auto-speed-select;
                sfp-eeprom = <&sfp2_eeprom_3>;
                sfp-phy-handle = <&sfp2_phy_3>;
            };
            port2@220000 {
                if_name = "CE21";
                medium_type = <1>;
                reg = <0x220000 0x10000>;
                phy-handle = <&phy2_3>;
                phy-mode = "rgmii-id";
                //auto-speed-select;
                sfp-eeprom = <&sfp1_eeprom_3>;
                sfp-phy-handle = <&sfp1_phy_3>;
            };
        };

        // ts_3@290000 {
        //     compatible = "flx,ts";
        //     reg = <0x00290000 0x1200>;
        //     interrupt-parent = <&gpio>;
        //     interrupts = <6 8>;
        // };

        // ts_3@298000 {
        //     compatible = "flx,ts";
        //     reg = <0x00298000 0x1200>;
        //     interrupt-parent = <&gpio>;
        //     interrupts = <6 8>;
        // };

        // ts_3@2a0000 {
        //     compatible = "flx,ts";
        //     reg = <0x002a0000 0x1200>;
        //     interrupt-parent = <&gpio>;
        //     interrupts = <6 8>;
        // };

        // ts_3@2a8000 {
        //     compatible = "flx,ts";
        //     reg = <0x002a8000 0x1200>;
        //     interrupt-parent = <&gpio>;
        //     interrupts = <6 8>;
        // };
    };

    ioexpand_gpio_3: pca9555@22 {
        compatible = "nxp,pca9555";
        reg = <0x22>;

        gpio-controller;
        #gpio-cells = <2>;
    };
};

&gpio {
	mdio3_pins: mdio3 {
		brcm,pins = <5 4>;		// MDC, MDIO 
		brcm,function = <1 0>;
	};
};

&soc {
	mdio3: mdio3 {
		compatible = "virtual,mdio-gpio";
		#address-cells = <1>;
		#size-cells = <0>;
		pinctrl-names = "default";
		pinctrl-0 = <&mdio3_pins>;
		// MDC and MDIO, in that order
		gpios = <   &gpio 5 0 
                    &gpio 4 0>;

        // PHY for FRS port 0
        phy0_3: mdio3_phy@5 {
            compatible = "ethernet-phy-ieee802.3-c22";
            reg = <0x5>;
        };
        // PHY for FRS port 1
        phy1_3: mdio3_phy@1 {
            compatible = "ethernet-phy-ieee802.3-c22";
            reg = <0x0>;
            // Enable RCLK to CLK125 pin
            marvell,reg-init = <2 16 0xffff 0x0001>;
        };
        // PHY for FRS port 2
        phy2_3: mdio3_phy@0 {
            compatible = "ethernet-phy-ieee802.3-c22";
            reg = <0x1>;
            // Enable RCLK to CLK125 pin
            marvell,reg-init = <2 16 0xffff 0x0001>;
        };
	};

    // I2C bus to SFP1
    i2c-sfp1_3 {
        compatible = "i2c-gpio";
        #address-cells = <1>;
        #size-cells = <0>;
        // SDA and SCL
        gpios = <   &ioexpand_gpio_3 1 0
                    &ioexpand_gpio_3 2 0>;

        // Hw is not open-drain, it can drive high.
        // So must not use xxx-open-drain here.
        // Enable clock stretching by not using setting output-only
        //i2c-gpio,sda-open-drain;
        //i2c-gpio,scl-open-drain;
        //i2c-gpio,scl-output-only;
        i2c-gpio,delay-us = <5>;
        i2c-gpio,timeout-ms = <100>;

        // I2C slave: PHY in SFP
        sfp1-mdio@56 {
            #address-cells = <1>;
            #size-cells = <0>;
            compatible = "flx,i2c-mdio";
            reg = <0x56>;

            // PHY device on virtual MDIO bus
            sfp1_phy_3: sfp1-phy@16 {
                compatible = "ethernet-phy-ieee802.3-c22";
                // I2C slave address 0xac with write bit,
                // actual I2C slave address 0x56,
                // PHY address 0x16
                reg = <0x16>;
            };
        };

        // I2C slave: EEPROM in SFP
        sfp1_eeprom_3: sfp1-eeprom@50 {
            compatible = "atmel,at24c01a";
            reg = <0x50>;
        };
    };

    // I2C bus to SFP2
    i2c-sfp2_3 {
        compatible = "i2c-gpio";
        #address-cells = <1>;
        #size-cells = <0>;
        // SDA and SCL 
        gpios = <   &ioexpand_gpio_3 6 0
                    &ioexpand_gpio_3 7 0>;

        // Hw is not open-drain, it can drive high.
        // So must not use xxx-open-drain here.
        // Enable clock stretching by not using setting output-only.
        //i2c-gpio,sda-open-drain;
        //i2c-gpio,scl-open-drain;
        //i2c-gpio,scl-output-only;
        i2c-gpio,delay-us = <5>;
        i2c-gpio,timeout-ms = <100>;

        // I2C slave: PHY in SFP
        sfp2-mdio@56 {
            #address-cells = <1>;
            #size-cells = <0>;
            compatible = "flx,i2c-mdio";
            reg = <0x56>;

            // PHY device on virtual MDIO bus
            sfp2_phy_3: sfp2-phy@16 {
                compatible = "ethernet-phy-ieee802.3-c22";
                // I2C slave address 0xac with write bit,
                // actual I2C slave address 0x56,
                // PHY address 0x16
                reg = <0x16>;
            };
        };

        // I2C slave: EEPROM in SFP
        sfp2_eeprom_3: sfp2-eeprom@50 {
            compatible = "atmel,at24c01a";
            reg = <0x50>;
        };
    };
};

